{"version":3,"sources":["App.js","index.js"],"names":["App","messages","setMessages","useState","input","setInput","isLoading","setIsLoading","error","setError","welcomeMessageSent","setWelcomeMessageSent","language","setLanguage","messagesEndRef","useRef","useEffect","addBotMessage","scrollToBottom","text","terms","arguments","length","undefined","prevMessages","isBot","current","scrollIntoView","behavior","speak","lang","window","utterance","SpeechSynthesisUtterance","speechSynthesis","console","React","createElement","Container","Typography","variant","sx","my","Alert","severity","mb","Paper","height","overflow","p","List","map","message","index","ListItem","key","justifyContent","elevation","maxWidth","bgcolor","ListItemText","primary","whiteSpace","term","termIndex","width","darija_medical_term","category_french","term_french","term_english","mt","contextual_description_french","example_scenario","Button","onClick","size","startIcon","VolumeUp","ref","FormControl","fullWidth","InputLabel","Select","value","onChange","e","target","label","MenuItem","onSubmit","async","preventDefault","trim","log","response","fetch","method","headers","body","JSON","stringify","query","ok","Error","status","data","json","style","display","TextField","placeholder","mr","disabled","type","Send","CircularProgress","ReactDOM","render","StrictMode","document","getElementById","navigator","addEventListener","serviceWorker","register","then","registration","scope","catch"],"mappings":"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","file":"static/js/main.a1b21766.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Paper,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  CircularProgress,\r\n  Alert,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel\r\n} from '@mui/material';\r\nimport { Send, VolumeUp } from '@mui/icons-material';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nfunction App() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [welcomeMessageSent, setWelcomeMessageSent] = useState(false);\r\n  const [language, setLanguage] = useState('darija');\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!welcomeMessageSent) {\r\n      addBotMessage(\"Merhba! Ana l'assistant dyalk l'Darija Medical Terms. Kifach n9der n3awnek lyum?\");\r\n      setWelcomeMessageSent(true);\r\n    }\r\n  }, [welcomeMessageSent]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const addBotMessage = (text, terms = null) => {\r\n    setMessages(prevMessages => [...prevMessages, { text, isBot: true, terms }]);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (input.trim() === '') return;\r\n    setMessages(prevMessages => [...prevMessages, { text: input, isBot: false }]);\r\n    setInput('');\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      console.log(`Sending search request for \"${input}\" in ${language}`);\r\n      const response = await fetch(`${API_URL}/terms/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ query: input, language }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Received response:', data);\r\n\r\n      if (data.terms && data.terms.length > 0) {\r\n        console.log(`Found ${data.terms.length} terms`);\r\n        addBotMessage(\"Here's what I found:\", data.terms);\r\n      } else {\r\n        console.log('No terms found');\r\n        addBotMessage(data.message || \"No terms found. Please try a different query.\");\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing query:', error);\r\n      setError(error.message);\r\n      addBotMessage(\"Sorry, there was an error processing your request. Please try again later.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  const speak = (text, lang) => {\r\n    if ('speechSynthesis' in window) {\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.lang = lang;\r\n      window.speechSynthesis.speak(utterance);\r\n    } else {\r\n      console.error('Text-to-speech not supported in this browser');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h4\" sx={{ my: 2 }}>\r\n        Darija Medical Terms Chatbot\r\n      </Typography>\r\n\r\n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\r\n\r\n      <Paper sx={{ height: '60vh', overflow: 'auto', p: 2, mb: 2 }}>\r\n        <List>\r\n          {messages.map((message, index) => (\r\n            <ListItem key={index} sx={{ justifyContent: message.isBot ? 'flex-start' : 'flex-end' }}>\r\n              <Paper elevation={3} sx={{ p: 1, maxWidth: '70%', bgcolor: message.isBot ? 'grey.100' : 'primary.light' }}>\r\n                <ListItemText primary={message.text} sx={{ whiteSpace: 'pre-wrap' }} />\r\n                {message.terms && (\r\n                  <List>\r\n                    {message.terms.map((term, termIndex) => (\r\n                      <ListItem key={termIndex}>\r\n                        <Paper elevation={1} sx={{ p: 1, width: '100%' }}>\r\n                          <Typography variant=\"h6\">{term.darija_medical_term}</Typography>\r\n                          <Typography variant=\"body2\">Category: {term.category_french}</Typography>\r\n                          <Typography variant=\"body2\">French: {term.term_french}</Typography>\r\n                          <Typography variant=\"body2\">English: {term.term_english}</Typography>\r\n                          <Typography variant=\"body2\" sx={{ mt: 1 }}>Description: {term.contextual_description_french}</Typography>\r\n                          <Typography variant=\"body2\" sx={{ mt: 1 }}>Example Scenario: {term.example_scenario}</Typography>\r\n                          <Button onClick={() => speak(term.darija_medical_term, 'ar-MA')} size=\"small\" startIcon={<VolumeUp />}>\r\n                            Darija\r\n                          </Button>\r\n                          <Button onClick={() => speak(term.term_french, 'fr-FR')} size=\"small\" startIcon={<VolumeUp />}>\r\n                            French\r\n                          </Button>\r\n                          <Button onClick={() => speak(term.term_english, 'en-US')} size=\"small\" startIcon={<VolumeUp />}>\r\n                            English\r\n                          </Button>\r\n                        </Paper>\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                )}\r\n              </Paper>\r\n            </ListItem>\r\n          ))}\r\n          <div ref={messagesEndRef}></div>\r\n        </List>\r\n      </Paper>\r\n\r\n      <FormControl fullWidth sx={{ mb: 2 }}>\r\n        <InputLabel>Language</InputLabel>\r\n        <Select\r\n          value={language}\r\n          onChange={(e) => setLanguage(e.target.value)}\r\n          label=\"Language\"\r\n        >\r\n          <MenuItem value=\"darija\">Darija</MenuItem>\r\n          <MenuItem value=\"french\">French</MenuItem>\r\n          <MenuItem value=\"english\">English</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n\r\n      <form onSubmit={handleSubmit} style={{ display: 'flex' }}>\r\n        <TextField\r\n          fullWidth\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message here...\"\r\n          sx={{ mr: 1 }}\r\n          disabled={isLoading}\r\n        />\r\n        <Button type=\"submit\" variant=\"contained\" startIcon={<Send />} disabled={isLoading}>\r\n          {isLoading ? <CircularProgress size={24} /> : 'Send'}\r\n        </Button>\r\n      </form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// Register service worker for PWA\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/service-worker.js')\n      .then(registration => {\n        console.log('Service Worker registered with scope:', registration.scope);\n      })\n      .catch(error => {\n        console.error('Service Worker registration failed:', error);\n      });\n  });\n}"],"sourceRoot":""}