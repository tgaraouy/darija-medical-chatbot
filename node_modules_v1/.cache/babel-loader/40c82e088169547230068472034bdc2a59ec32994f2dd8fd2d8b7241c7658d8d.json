{"ast":null,"code":"var _jsxFileName = \"C:\\\\darija-medical-chatbot\\\\frontend\\\\src\\\\App.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// ... (previous imports and code)\n\nconst handleSubmit = async e => {\n  e.preventDefault();\n  if (input.trim() === '') return;\n  setMessages(prevMessages => [...prevMessages, {\n    text: input,\n    isBot: false\n  }]);\n  setInput('');\n  try {\n    const response = await fetch(`${API_URL}/terms/search`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: input\n      })\n    });\n    const data = await response.json();\n    console.log('Received data from backend:', data);\n    if (data.terms && data.terms.length > 0) {\n      console.log('Terms found:', data.terms);\n      addBotMessage(\"Ha shnw l9it:\", data.terms);\n    } else {\n      console.log('No terms found');\n      addBotMessage(data.message || \"Ma l9it hta term. Jreb tkteb shi haja khra.\");\n    }\n  } catch (error) {\n    console.error('Error processing query:', error);\n    addBotMessage(\"Smeh liya, 3ndi moshkil bash njawbek daba. 3awd jreb mn be3d.\");\n  }\n};\n\n// ... (rest of the component)\n{\n  message.terms && /*#__PURE__*/_jsxDEV(List, {\n    children: message.terms.map((term, termIndex) => /*#__PURE__*/_jsxDEV(ListItem, {\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 1,\n        sx: {\n          p: 1,\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: term.darija\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"Category: \", term.category_english, \" (\", term.category_darija, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"English: \", term.explanation_english]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          sx: {\n            mt: 1\n          },\n          children: [\"Description (Darija): \", term.detailed_description_darija]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"French: \", term.french]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"Spanish: \", term.spanish]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"Italian: \", term.italian]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"German: \", term.german]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"Dutch: \", term.dutch]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => speak(term.darija, 'ar-MA'),\n          size: \"small\",\n          startIcon: /*#__PURE__*/_jsxDEV(VolumeUp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 87\n          }, this),\n          children: \"Darija\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => speak(term.explanation_english, 'en-US'),\n          size: \"small\",\n          startIcon: /*#__PURE__*/_jsxDEV(VolumeUp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 100\n          }, this),\n          children: \"English\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, termIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n}","map":{"version":3,"names":["handleSubmit","e","preventDefault","input","trim","setMessages","prevMessages","text","isBot","setInput","response","fetch","API_URL","method","headers","body","JSON","stringify","query","data","json","console","log","terms","length","addBotMessage","message","error","_jsxDEV","List","children","map","term","termIndex","ListItem","Paper","elevation","sx","p","width","Typography","variant","darija","fileName","_jsxFileName","lineNumber","columnNumber","category_english","category_darija","explanation_english","mt","detailed_description_darija","french","spanish","italian","german","dutch","Button","onClick","speak","size","startIcon","VolumeUp"],"sources":["C:/darija-medical-chatbot/frontend/src/App.js"],"sourcesContent":["// ... (previous imports and code)\n\nconst handleSubmit = async (e) => {\n  e.preventDefault();\n  if (input.trim() === '') return;\n\n  setMessages(prevMessages => [...prevMessages, { text: input, isBot: false }]);\n  setInput('');\n\n  try {\n    const response = await fetch(`${API_URL}/terms/search`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query: input }),\n    });\n    const data = await response.json();\n    console.log('Received data from backend:', data);\n\n    if (data.terms && data.terms.length > 0) {\n      console.log('Terms found:', data.terms);\n      addBotMessage(\"Ha shnw l9it:\", data.terms);\n    } else {\n      console.log('No terms found');\n      addBotMessage(data.message || \"Ma l9it hta term. Jreb tkteb shi haja khra.\");\n    }\n  } catch (error) {\n    console.error('Error processing query:', error);\n    addBotMessage(\"Smeh liya, 3ndi moshkil bash njawbek daba. 3awd jreb mn be3d.\");\n  }\n};\n\n// ... (rest of the component)\n{message.terms && (\n  <List>\n    {message.terms.map((term, termIndex) => (\n      <ListItem key={termIndex}>\n        <Paper elevation={1} sx={{ p: 1, width: '100%' }}>\n          <Typography variant=\"h6\">{term.darija}</Typography>\n          <Typography variant=\"body2\">Category: {term.category_english} ({term.category_darija})</Typography>\n          <Typography variant=\"body2\">English: {term.explanation_english}</Typography>\n          <Typography variant=\"body2\" sx={{ mt: 1 }}>Description (Darija): {term.detailed_description_darija}</Typography>\n          <Typography variant=\"body2\">French: {term.french}</Typography>\n          <Typography variant=\"body2\">Spanish: {term.spanish}</Typography>\n          <Typography variant=\"body2\">Italian: {term.italian}</Typography>\n          <Typography variant=\"body2\">German: {term.german}</Typography>\n          <Typography variant=\"body2\">Dutch: {term.dutch}</Typography>\n          <Button onClick={() => speak(term.darija, 'ar-MA')} size=\"small\" startIcon={<VolumeUp />}>\n            Darija\n          </Button>\n          <Button onClick={() => speak(term.explanation_english, 'en-US')} size=\"small\" startIcon={<VolumeUp />}>\n            English\n          </Button>\n        </Paper>\n      </ListItem>\n    ))}\n  </List>\n)}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}