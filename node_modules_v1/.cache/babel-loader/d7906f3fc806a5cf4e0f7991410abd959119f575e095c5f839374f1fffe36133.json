{"ast":null,"code":"var _jsxFileName = \"C:\\\\darija-medical-chatbot\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Container, Typography, TextField, Button, Paper, List, ListItem, ListItemText } from './components/ui';\nimport { Send, VolumeUp } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    addBotMessage(\"Hello! I'm your Darija Medical Terms assistant. How can I help you today?\");\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const addBotMessage = text => {\n    setMessages(prevMessages => [...prevMessages, {\n      text,\n      isBot: true\n    }]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (input.trim() === '') return;\n    setMessages(prevMessages => [...prevMessages, {\n      text: input,\n      isBot: false\n    }]);\n    setInput('');\n    try {\n      const response = await fetch(`${API_URL}/terms/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: input\n        })\n      });\n      const data = await response.json();\n      let botResponse = '';\n      if (data.terms && data.terms.length > 0) {\n        botResponse = data.terms.map(term => `Darija: ${term.darija}\\nEnglish: ${term.english}\\nFrench: ${term.french}\\nSpanish: ${term.spanish}\\nDutch: ${term.dutch}\\nCategory: ${term.category}`).join('\\n\\n');\n      } else {\n        botResponse = data.message || \"I couldn't find any matching terms. Can you try rephrasing?\";\n      }\n      addBotMessage(botResponse);\n    } catch (error) {\n      console.error('Error processing query:', error);\n      addBotMessage(\"I'm sorry, I'm having trouble processing your request. Please try again later.\");\n    }\n  };\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  const speak = text => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'ar-MA'; // Set to Moroccan Arabic if available\n      window.speechSynthesis.speak(utterance);\n    } else {\n      console.error('Text-to-speech not supported in this browser');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      className: \"my-5\",\n      children: \"Darija Medical Terms Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      className: \"h-[60vh] overflow-auto p-5 mb-5\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(ListItem, {\n            className: `justify-${message.isBot ? 'start' : 'end'}`,\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              elevation: 3,\n              className: `p-3 max-w-[70%] ${message.isBot ? 'bg-gray-100' : 'bg-blue-100'}`,\n              children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: message.text,\n                className: \"whitespace-pre-wrap\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 19\n              }, this), message.isBot && /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => speak(message.text),\n                size: \"small\",\n                children: /*#__PURE__*/_jsxDEV(VolumeUp, {\n                  className: \"w-4 h-4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message here...\",\n        className: \"mr-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        children: [/*#__PURE__*/_jsxDEV(Send, {\n          className: \"w-4 h-4 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), \"Send\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5T9mGH1XtiC467pqOMuWw2291HM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Container","Typography","TextField","Button","Paper","List","ListItem","ListItemText","Send","VolumeUp","jsxDEV","_jsxDEV","API_URL","App","_s","messages","setMessages","input","setInput","messagesEndRef","addBotMessage","scrollToBottom","text","prevMessages","isBot","handleSubmit","e","preventDefault","trim","response","fetch","method","headers","body","JSON","stringify","query","data","json","botResponse","terms","length","map","term","darija","english","french","spanish","dutch","category","join","message","error","console","_messagesEndRef$curre","current","scrollIntoView","behavior","speak","window","utterance","SpeechSynthesisUtterance","lang","speechSynthesis","children","variant","className","fileName","_jsxFileName","lineNumber","columnNumber","index","Fragment","elevation","primary","onClick","size","ref","onSubmit","fullWidth","value","onChange","target","placeholder","type","_c","$RefreshReg$"],"sources":["C:/darija-medical-chatbot/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Container, Typography, TextField, Button, Paper, List, ListItem, ListItemText } from './components/ui';\nimport { Send, VolumeUp } from 'lucide-react';\n\nconst API_URL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    addBotMessage(\"Hello! I'm your Darija Medical Terms assistant. How can I help you today?\");\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const addBotMessage = (text) => {\n    setMessages(prevMessages => [...prevMessages, { text, isBot: true }]);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (input.trim() === '') return;\n\n    setMessages(prevMessages => [...prevMessages, { text: input, isBot: false }]);\n    setInput('');\n\n    try {\n      const response = await fetch(`${API_URL}/terms/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query: input }),\n      });\n      const data = await response.json();\n      let botResponse = '';\n\n      if (data.terms && data.terms.length > 0) {\n        botResponse = data.terms.map(term => \n          `Darija: ${term.darija}\\nEnglish: ${term.english}\\nFrench: ${term.french}\\nSpanish: ${term.spanish}\\nDutch: ${term.dutch}\\nCategory: ${term.category}`\n        ).join('\\n\\n');\n      } else {\n        botResponse = data.message || \"I couldn't find any matching terms. Can you try rephrasing?\";\n      }\n\n      addBotMessage(botResponse);\n    } catch (error) {\n      console.error('Error processing query:', error);\n      addBotMessage(\"I'm sorry, I'm having trouble processing your request. Please try again later.\");\n    }\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const speak = (text) => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'ar-MA'; // Set to Moroccan Arabic if available\n      window.speechSynthesis.speak(utterance);\n    } else {\n      console.error('Text-to-speech not supported in this browser');\n    }\n  };\n\n  return (\n    <Container>\n      <Typography variant=\"h4\" className=\"my-5\">\n        Darija Medical Terms Chatbot\n      </Typography>\n      <Paper className=\"h-[60vh] overflow-auto p-5 mb-5\">\n        <List>\n          {messages.map((message, index) => (\n            <React.Fragment key={index}>\n              <ListItem className={`justify-${message.isBot ? 'start' : 'end'}`}>\n                <Paper elevation={3} className={`p-3 max-w-[70%] ${message.isBot ? 'bg-gray-100' : 'bg-blue-100'}`}>\n                  <ListItemText primary={message.text} className=\"whitespace-pre-wrap\" />\n                  {message.isBot && (\n                    <Button onClick={() => speak(message.text)} size=\"small\">\n                      <VolumeUp className=\"w-4 h-4\" />\n                    </Button>\n                  )}\n                </Paper>\n              </ListItem>\n            </React.Fragment>\n          ))}\n          <div ref={messagesEndRef} />\n        </List>\n      </Paper>\n      <form onSubmit={handleSubmit} className=\"flex\">\n        <TextField\n          fullWidth\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your message here...\"\n          className=\"mr-2\"\n        />\n        <Button type=\"submit\" variant=\"contained\">\n          <Send className=\"w-4 h-4 mr-2\" />\n          Send\n        </Button>\n      </form>\n    </Container>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}